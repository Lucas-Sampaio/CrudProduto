name: CI - Build & Test .NET 8

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
 
concurrency: #cancela workflows em andamento na mesma branch
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write  # ⬅️ Isso permite criar tags no repositório

jobs:
  versionamento: 
    runs-on: ubuntu-latest

    outputs: 
      version: ${{ steps.versioning.outputs.version }}
  
    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4
        with:
         ref: ${{ github.head_ref }}
         fetch-depth: 0

      - uses: codacy/git-version@2.8.0
        id: versioning
        with:
          release-branch: master
          prefix: v

      - name: 🏷️ Criar tag no GitHub
        if: github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            echo "::notice:: ${{ steps.versioning.outputs.version }}"
            git config --global user.email "${{ github.actor}}@users.noreply.github.com"
            git config --global user.name "${{ github.actor }}"
            git tag -a ${{ steps.versioning.outputs.version }} -m "Release ${{ steps.versioning.outputs.version }}"
            git push --tags

  build:
    needs: versionamento
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🏗️ Configurar .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: 💾 Cache do NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: 📦 Restaurar pacotes
        run: dotnet restore

      - name: 🏗️ Compilar aplicação
        run: dotnet build --configuration Release --no-restore

      - name: ✅ Rodar testes
        run: dotnet test --configuration Release --no-build --logger trx --results-directory test-results

      - name: 📦 Publicar aplicação
        run: dotnet publish -c Release --no-restore --no-build  -o ./publish

      - name: 📝 Copiar Dockerfile para publicação
        run: cp ./src/CrudProduto.Api/Dockerfile ./publish/

      - name: 📂 Upload dos arquivos publicados
        uses: actions/upload-artifact@v4
        with:
          name: app-published
          path: ./publish
        
  dependency-check:
     needs: versionamento
     runs-on: ubuntu-latest
     permissions:
        contents: read
        pull-requests: write
     steps:
        - name: 📥 Checkout do código
          uses: actions/checkout@v4

        - name: 📥 dependency review
          uses: actions/dependency-review-action@v4
          with:
            fail-on-severity: high
            comment-summary-in-pr: true
            base-ref: master
            head-ref: master

  build-docker-image:
    needs: [versionamento, build]
    runs-on: ubuntu-latest
    env:
        version: ${{ needs.versionamento.outputs.version }}
    steps:

      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: app-published
          path: ./publish
          merge-multiple: false

      - name: 🔍 Autenticar no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build Docker
        run: docker build -t lucas29/crud-produto-app:${{ env.version }} .
      
      - name: Tag Docker image as latest
        run: | 
            docker tag -t lucas29/crud-produto-app:${{ env.version }} crud-produto-app:latest
        if: github.ref == 'refs/heads/master'

      - name: Docker Push
        run: | 
            docker push --all-tags  lucas29/crud-produto-app
      